//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Server/", ConfigurationName="ServiceReference1.IServerHelloWorld")]
    public interface IServerHelloWorld
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Server/IServerHelloWorld/getHelloWorldAsStringRequest", ReplyAction="http://Server/IServerHelloWorld/getHelloWorldAsStringResponse")]
        System.Threading.Tasks.Task<ServiceReference1.getHelloWorldAsStringResponse> getHelloWorldAsStringAsync(ServiceReference1.getHelloWorldAsStringRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getHelloWorldAsStringRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="getHelloWorldAsString", Namespace="http://Server/", Order=0)]
        public ServiceReference1.getHelloWorldAsStringRequestBody Body;
        
        public getHelloWorldAsStringRequest()
        {
        }
        
        public getHelloWorldAsStringRequest(ServiceReference1.getHelloWorldAsStringRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class getHelloWorldAsStringRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string arg0;
        
        public getHelloWorldAsStringRequestBody()
        {
        }
        
        public getHelloWorldAsStringRequestBody(string arg0)
        {
            this.arg0 = arg0;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getHelloWorldAsStringResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="getHelloWorldAsStringResponse", Namespace="http://Server/", Order=0)]
        public ServiceReference1.getHelloWorldAsStringResponseBody Body;
        
        public getHelloWorldAsStringResponse()
        {
        }
        
        public getHelloWorldAsStringResponse(ServiceReference1.getHelloWorldAsStringResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class getHelloWorldAsStringResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public getHelloWorldAsStringResponseBody()
        {
        }
        
        public getHelloWorldAsStringResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IServerHelloWorldChannel : ServiceReference1.IServerHelloWorld, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ServerHelloWorldClient : System.ServiceModel.ClientBase<ServiceReference1.IServerHelloWorld>, ServiceReference1.IServerHelloWorld
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServerHelloWorldClient() : 
                base(ServerHelloWorldClient.GetDefaultBinding(), ServerHelloWorldClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ServerHelloWorldPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerHelloWorldClient(EndpointConfiguration endpointConfiguration) : 
                base(ServerHelloWorldClient.GetBindingForEndpoint(endpointConfiguration), ServerHelloWorldClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerHelloWorldClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServerHelloWorldClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerHelloWorldClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServerHelloWorldClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerHelloWorldClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.getHelloWorldAsStringResponse> ServiceReference1.IServerHelloWorld.getHelloWorldAsStringAsync(ServiceReference1.getHelloWorldAsStringRequest request)
        {
            return base.Channel.getHelloWorldAsStringAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.getHelloWorldAsStringResponse> getHelloWorldAsStringAsync(string arg0)
        {
            ServiceReference1.getHelloWorldAsStringRequest inValue = new ServiceReference1.getHelloWorldAsStringRequest();
            inValue.Body = new ServiceReference1.getHelloWorldAsStringRequestBody();
            inValue.Body.arg0 = arg0;
            return ((ServiceReference1.IServerHelloWorld)(this)).getHelloWorldAsStringAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServerHelloWorldPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServerHelloWorldPort))
            {
                return new System.ServiceModel.EndpointAddress("http://pc-chojak:8080/RSI_ZAD4/ServerHelloWorldService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServerHelloWorldClient.GetBindingForEndpoint(EndpointConfiguration.ServerHelloWorldPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServerHelloWorldClient.GetEndpointAddress(EndpointConfiguration.ServerHelloWorldPort);
        }
        
        public enum EndpointConfiguration
        {
            
            ServerHelloWorldPort,
        }
    }
}
